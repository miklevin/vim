#! /usr/bin/env python

import shlex
import shutil
import argparse
import pandas as pd
from os import system
from os import getuid
from sys import stdout
from art import text2art
from pwd import getpwuid
from subprocess import Popen, PIPE

# Get Linux Username for portability between systems
username = getpwuid(getuid())[0]

try:
    Popen('rm /home/{username}/repos/hide/MikeLev.in/.journal.md.swp > nil')
except:
    ...

# Set Default Number of Files to Edit
list_of_journals = f"/home/{username}/repos/hide/journal/sites.csv"
path_to_journals = f"/home/{username}/repos/hide/"
edit_first_n_journals = 3

locs = f"""
/home/{username}/repos/vim
/home/{username}/repos/skite
/home/{username}/repos/hide/Pipulate.com
""".split("\n")[1:-1]

# Use big pretty ascii art to keep user informed
fig = lambda x: print(text2art(x))
fig("Loading")

# Determine how many journals to edit at once
aparser = argparse.ArgumentParser()
add_arg = aparser.add_argument
add_arg("-n", "--number", required=False)
args = aparser.parse_args()
number = args.number
df = pd.read_csv(list_of_journals, delimiter="|")
df = df.applymap(lambda x: x.strip())
df.columns = [x.strip() for x in df.columns]
if number == None:
    df = df.head(edit_first_n_journals)
elif number.isnumeric():
    number = int(number)
    if number > df.shape[0]:
        number = df.shape[0]
    df = df.head(number)


def flush(std):
    for line in std:
        line = line.strip()
        if line:
            print(line)
            stdout.flush()


def git(cwd, args):
    cmd = ["/usr/bin/git"] + shlex.split(args)
    print(f"COMMAND: << {shlex.join(cmd)} >>")
    process = Popen(
        args=cmd,
        cwd=cwd,
        stdout=PIPE,
        stderr=PIPE,
        shell=False,
        bufsize=1,
        universal_newlines=True,
    )
    flush(process.stdout)
    flush(process.stderr)


alist = df[['path']].values.tolist()
journals = " ".join([f'{path_to_journals}{x[0]}/journal.md' for x in alist])

fig("Pulling Repos")

for loc in locs:
    fig(loc.split("/")[-1])
    git(loc, "pull")

for item in alist:
    repo = item[0]
    fig(repo)
    loc = f"{path_to_journals}{repo}"
    git(loc, 'pull')
    print()

# Add the pages from MikeLev.in that I want to edit
pre = f"{path_to_journals}MikeLev.in/" 
edit_pages = ['linux', 'python', 'vim', 'git', 'seo', 'blog', 'index']
edit_pages = [f"{pre}{x}.md" for x in edit_pages]
edit_pages = " ".join(edit_pages)

misc_files = """~/repos/hide/journal/journal.txt
~/repos/skite/skite.py
~/repos/skite/slice.py
~/.config/nvim/init.vim
~/repos/hide/Pipulate.com/pipulate.md
~/repos/hide/Pipulate.com/software.md
""".split("\n")
misc_files = " ".join(misc_files)

edit_journals = f"nvim {journals} {misc_files} {edit_pages}"
# print(edit_journals)

system(edit_journals)

for dotconfig in ['.screenrc', '.gitconfig', '.bash_prompt', '.bash_profile']:
    shutil.copyfile(f"/home/{username}/{dotconfig}", f"/home/{username}/repos/vim/{dotconfig}")

shutil.copyfile(f"/usr/local/sbin/all", f"/home/{username}/repos/vim/all")
try:
    shutil.copyfile(f"/home/{username}/.vimrc", f"/mnt/c/Users/mikle/.vimrc")
except:
    pass

fig("Pushing Repos")

for loc in locs:
    print(loc)
    git(loc, 'commit -am "pushing vim to github..."')
    git(loc, "push")
    print()
 
for item in alist:
    repo = item[0]
    fig(repo)
    loc = f"{path_to_journals}{repo}"
    git(loc, f'commit -am "Pushing {repo} to Github..."')
    git(loc, "push")
    print()

fig("Done!")
