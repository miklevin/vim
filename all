#! /usr/bin/env python
#        _             _ _           _ _
# __   _(_)_ __ ___   (_) |_    __ _| | |
# \ \ / / | '_ ` _ \  | | __|  / _` | | |
#  \ V /| | | | | | | | | |_  | (_| | | |
#   \_/ |_|_| |_| |_| |_|\__|  \__,_|_|_|


import shlex
import shutil
import argparse
from os import system
from os import getuid
from sys import stdout
from time import sleep
from pwd import getpwuid
from pyfiglet import Figlet
from subprocess import Popen, PIPE


# Get Linux Username for portability between systems
USERNAME = getpwuid(getuid())[0]
GIT_EXE = "/usr/bin/git"
REPOS = f"/home/{USERNAME}/repos/"
HIDE = f"{REPOS}hide/"

# Files to edit
edit_files = [
    f"{HIDE}MikeLev.in/journal.md",
    f"{HIDE}journal/journal.txt",
    f"~/.config/nvim/init.vim",
    f"{REPOS}skite/chopchop.py",
]

# Places to put files after editing
copy_to_destination = {
    "/home/ubuntu/py311/bin/all": f"{REPOS}vim/all",
    "/home/ubuntu/.config/nvim/init.vim": f"{REPOS}vim/init.vim",
}

# Repos to push after editing
commit_and_push = [
    f"{REPOS}vim",
    f"{REPOS}skite",
    f"{REPOS}journal",
    f"{REPOS}MikeLev.in",
]


# Load function early so we can use it, pronto!
def fig(text, description=None):
    #  _____ _       _      _
    # |  ___(_) __ _| | ___| |_
    # | |_  | |/ _` | |/ _ \ __|
    # |  _| | | (_| | |  __/ |_
    # |_|   |_|\__, |_|\___|\__|
    #          |___/
    """Let them see text!"""
    f = Figlet()
    print(f.renderText(text))
    if description:
        print(description)
    sleep(0.5)


def flush(std):
    """Flush a stream."""
    for line in std:
        line = line.strip()
        if line:
            print(line)
            stdout.flush()


def git(cwd, line_command):
    """Run a Linux git command."""
    cmd = [GIT_EXE] + shlex.split(line_command)
    print(f"{cmd}")
    process = Popen(
        args=cmd,
        cwd=cwd,
        stdout=PIPE,
        stderr=PIPE,
        shell=False,
        bufsize=1,
        universal_newlines=True,
    )
    flush(process.stdout)


def git_pull():
    fig("vim it all...", "Loading data into multiple vim buffers")
    seen = set()
    for afile in edit_files:
        arepo = "/".join(afile.split("/")[:-1])
        if REPOS in arepo and arepo not in seen:
            git(arepo, "pull")
            seen.add(arepo)


def load_editor():
    print("Loading editor...")
    files = " ".join(edit_files)
    command = f"nvim {files}"
    system(command)


def copy_files():
    print("Copying files...")
    for source, destination in copy_to_destination.items():
        shutil.copyfile(source, destination)


def git_push():
    print("Pushing files...")
    for repo in commit_and_push:
        git(repo, "commit -am 'pushing vim to github...'")
        git(repo, "push")


# Main Control Flow
git_pull()
# load_editor()
copy_files()
git_push()


raise SystemExit()

for dotconfig in [".screenrc", ".gitconfig", ".bash_prompt", ".bash_profile"]:
    shutil.copyfile(f"/home/{USERNAME}/{dotconfig}", f"{REPOS}vim/{dotconfig}")

shutil.copyfile(f"/usr/local/sbin/all", f"{REPOS}vim/all")
try:
    shutil.copyfile(f"/home/{USERNAME}/.config/nvim/init.vim", f"{REPOS}vim/")
    shutil.copyfile(
        f"/home/{USERNAME}/.config/nvim/init.vim", f"/home/{USERNAME}/.vimrc"
    )
except:
    pass

for loc in locs:
    print(loc)
    git(loc, 'commit -am "pushing vim to github..."')
    git(loc, "push")
    print()

for item in alist:
    repo = item[0]
    fig(repo)
    loc = f"{path_to_journals}{repo}"
    git(loc, f'commit -am "Pushing {repo} to Github..."')
    git(loc, "push")
    print()

fig("Done!")
